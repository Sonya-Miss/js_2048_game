{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["class $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.state = initialState || this.createInitialState();\n        this.score = 0;\n        this.status = \"idle\";\n        this.start();\n    }\n    createInitialState() {\n        return Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n    }\n    generateRandomTile() {\n        const emptyCells = [];\n        this.state.forEach((currentRow, r)=>{\n            currentRow.forEach((cell, c)=>{\n                if (cell === 0) emptyCells.push([\n                    r,\n                    c\n                ]);\n            });\n        });\n        if (emptyCells.length === 0) return this.updateStatus();\n        const [row, col] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n    updateStatus() {\n        this.status = this.state.flat().includes(2048) ? \"win\" : this.canMove() ? \"playing\" : \"lose\";\n    }\n    canMove() {\n        return this.state.some((currentRow, r)=>currentRow.some((cell, c)=>cell === 0 || c < 3 && cell === currentRow[c + 1] || r < 3 && cell === this.state[r + 1][c]));\n    }\n    move(direction) {\n        const moveRow = (row)=>{\n            const newRow = row.filter(Boolean);\n            const mergedRow = [];\n            for(let i = 0; i < newRow.length; i++)if (newRow[i] === newRow[i + 1]) {\n                mergedRow.push(newRow[i] * 2);\n                this.score += newRow[i] * 2;\n                i++;\n            } else mergedRow.push(newRow[i]);\n            return [\n                ...mergedRow,\n                ...Array(4 - mergedRow.length).fill(0)\n            ];\n        };\n        const moveOperations = {\n            left: ()=>{\n                this.state = this.state.map(moveRow);\n            },\n            right: ()=>{\n                this.state = this.state.map((row)=>moveRow(row.reverse())).map((row)=>row.reverse());\n            },\n            up: ()=>{\n                this.transpose();\n                this.state = this.state.map(moveRow);\n                this.transpose();\n            },\n            down: ()=>{\n                this.transpose();\n                this.state = this.state.map((row)=>moveRow(row.reverse())).map((row)=>row.reverse());\n                this.transpose();\n            }\n        };\n        const previousState = JSON.stringify(this.state);\n        moveOperations[direction]();\n        if (previousState !== JSON.stringify(this.state)) {\n            this.generateRandomTile();\n            this.updateStatus();\n        }\n    }\n    transpose() {\n        this.state = this.state[0].map((_, colIndex)=>this.state.map((row)=>row[colIndex]));\n    }\n    start() {\n        this.score = 0;\n        this.state = this.createInitialState();\n        this.status = \"playing\";\n        this.generateRandomTile();\n        this.generateRandomTile();\n    }\n    restart() {\n        this.start();\n    }\n    getState() {\n        return this.state;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n}\nvar $a5fd07fa01589658$export$2e2bcd8739ae039 = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, $a5fd07fa01589658$export$2e2bcd8739ae039)();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nfunction $09e991522ca7e64e$var$updateUI() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    state.flat().forEach((value, index)=>{\n        const cell = $09e991522ca7e64e$var$cells[index];\n        cell.textContent = value === 0 ? \"\" : value; // Показуємо плитку, якщо не 0\n        cell.className = `field-cell field-cell--${value}`; // Додаємо відповідний клас для стилів\n    });\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore(); // Оновлюємо рахунок\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    if (gameStatus === \"win\") {\n        $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\"); // Виграли\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    } else if (gameStatus === \"lose\") {\n        $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\"); // Програли\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    } else {\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    }\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$updateUI();\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n    $09e991522ca7e64e$var$startButton.classList.remove(\"hidden\");\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.move(\"left\");\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.move(\"right\");\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.move(\"up\");\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.move(\"down\");\n            break;\n    }\n    $09e991522ca7e64e$var$updateUI(); // Оновлюємо UI після кожного ходу\n});\n\n\n//# sourceMappingURL=index.003ba463.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class.js';\n\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst scoreElement = document.querySelector('.game-score');\nconst startButton = document.querySelector('.button.start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\n\nfunction updateUI() {\n  const state = game.getState();\n\n  state.flat().forEach((value, index) => {\n    const cell = cells[index];\n\n    cell.textContent = value === 0 ? '' : value; // Показуємо плитку, якщо не 0\n    cell.className = `field-cell field-cell--${value}`; // Додаємо відповідний клас для стилів\n  });\n\n  scoreElement.textContent = game.getScore(); // Оновлюємо рахунок\n\n  const gameStatus = game.getStatus();\n\n  if (gameStatus === 'win') {\n    winMessage.classList.remove('hidden'); // Виграли\n    loseMessage.classList.add('hidden');\n  } else if (gameStatus === 'lose') {\n    loseMessage.classList.remove('hidden'); // Програли\n    winMessage.classList.add('hidden');\n  } else {\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  game.restart();\n  updateUI();\n\n  startButton.textContent = 'Restart';\n  startMessage.classList.add('hidden');\n\n  startButton.classList.add('restart');\n  startButton.classList.remove('hidden');\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.move('left');\n      break;\n    case 'ArrowRight':\n      game.move('right');\n      break;\n    case 'ArrowUp':\n      game.move('up');\n      break;\n    case 'ArrowDown':\n      game.move('down');\n      break;\n  }\n  updateUI(); // Оновлюємо UI після кожного ходу\n});\n","class Game {\n  constructor(initialState) {\n    this.state = initialState || this.createInitialState();\n    this.score = 0;\n    this.status = 'idle';\n    this.start();\n  }\n\n  createInitialState() {\n    return Array.from({ length: 4 }, () => Array(4).fill(0));\n  }\n\n  generateRandomTile() {\n    const emptyCells = [];\n\n    this.state.forEach((currentRow, r) => {\n      currentRow.forEach((cell, c) => {\n        if (cell === 0) {\n          emptyCells.push([r, c]);\n        }\n      });\n    });\n\n    if (emptyCells.length === 0) {\n      return this.updateStatus();\n    }\n\n    const [row, col] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  updateStatus() {\n    this.status = this.state.flat().includes(2048)\n      ? 'win'\n      : this.canMove()\n        ? 'playing'\n        : 'lose';\n  }\n\n  canMove() {\n    return this.state.some(\n      (currentRow, r) =>\n        currentRow.some(\n          (cell, c) =>\n            cell === 0 ||\n            (c < 3 && cell === currentRow[c + 1]) ||\n            (r < 3 && cell === this.state[r + 1][c]),\n        ),\n      // eslint-disable-next-line function-paren-newline\n    );\n  }\n\n  move(direction) {\n    const moveRow = (row) => {\n      const newRow = row.filter(Boolean);\n      const mergedRow = [];\n\n      for (let i = 0; i < newRow.length; i++) {\n        if (newRow[i] === newRow[i + 1]) {\n          mergedRow.push(newRow[i] * 2);\n          this.score += newRow[i] * 2;\n          i++;\n        } else {\n          mergedRow.push(newRow[i]);\n        }\n      }\n\n      return [...mergedRow, ...Array(4 - mergedRow.length).fill(0)];\n    };\n\n    const moveOperations = {\n      left: () => {\n        this.state = this.state.map(moveRow);\n      },\n      right: () => {\n        this.state = this.state\n          .map((row) => moveRow(row.reverse()))\n          .map((row) => row.reverse());\n      },\n      up: () => {\n        this.transpose();\n        this.state = this.state.map(moveRow);\n        this.transpose();\n      },\n      down: () => {\n        this.transpose();\n\n        this.state = this.state\n          .map((row) => moveRow(row.reverse()))\n          .map((row) => row.reverse());\n        this.transpose();\n      },\n    };\n\n    const previousState = JSON.stringify(this.state);\n\n    moveOperations[direction]();\n\n    if (previousState !== JSON.stringify(this.state)) {\n      this.generateRandomTile();\n      this.updateStatus();\n    }\n  }\n\n  transpose() {\n    this.state = this.state[0].map(\n      (_, colIndex) => this.state.map((row) => row[colIndex]),\n      // eslint-disable-next-line function-paren-newline\n    );\n  }\n\n  start() {\n    this.score = 0;\n    this.state = this.createInitialState();\n    this.status = 'playing';\n    this.generateRandomTile();\n    this.generateRandomTile();\n  }\n\n  restart() {\n    this.start();\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n}\n\nexport default Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","state","createInitialState","score","status","start","Array","from","length","fill","generateRandomTile","emptyCells","forEach","currentRow","r","cell","c","push","updateStatus","row","col","Math","floor","random","flat","includes","canMove","some","move","direction","moveRow","newRow","filter","Boolean","mergedRow","i","previousState","JSON","stringify","moveOperations","left","map","right","reverse","up","transpose","down","_","colIndex","restart","getState","getScore","getStatus","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$scoreElement","querySelector","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$updateUI","value","index","textContent","className","gameStatus","classList","remove","add","addEventListener","e","key"],"version":3,"file":"index.003ba463.js.map"}